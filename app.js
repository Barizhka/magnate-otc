// Mock API –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ (–±–µ–∑ –±—ç–∫–µ–Ω–¥–∞)
class MockAPI {
    constructor() {
        this.users = JSON.parse(localStorage.getItem('mock_users')) || {};
        this.deals = JSON.parse(localStorage.getItem('mock_deals')) || {};
        this.tickets = JSON.parse(localStorage.getItem('mock_tickets')) || {};
    }

    saveData() {
        localStorage.setItem('mock_users', JSON.stringify(this.users));
        localStorage.setItem('mock_deals', JSON.stringify(this.deals));
        localStorage.setItem('mock_tickets', JSON.stringify(this.tickets));
    }

    async login(login, password) {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –±—ç–∫–µ–Ω–¥—É
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        const user = Object.values(this.users).find(u => u.web_login === login && u.web_password === password);
        if (user) {
            const token = btoa(JSON.stringify({ user_id: user.user_id, timestamp: Date.now() }));
            localStorage.setItem('magante_token', token);
            return { token, user };
        }
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
    }

    async createDeal(userId, amount, description, paymentMethod) {
        await new Promise(resolve => setTimeout(resolve, 500));
        
        const dealId = 'deal_' + Date.now();
        const deal = {
            id: dealId,
            amount: amount,
            description: description,
            seller_id: userId,
            buyer_id: null,
            status: 'active',
            payment_method: paymentMethod,
            source: 'web',
            created_at: new Date().toISOString()
        };
        
        this.deals[dealId] = deal;
        this.saveData();
        
        return deal;
    }

    async getUserDeals(userId) {
        await new Promise(resolve => setTimeout(resolve, 500));
        
        return Object.values(this.deals).filter(deal => 
            deal.seller_id === userId || deal.buyer_id === userId
        ).sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
    }

    async createTicket(userId, subject, message) {
        await new Promise(resolve => setTimeout(resolve, 500));
        
        const ticketId = 'ticket_' + Date.now();
        const ticket = {
            id: ticketId,
            user_id: userId,
            subject: subject,
            message: message,
            status: 'open',
            created_at: new Date().toISOString()
        };
        
        this.tickets[ticketId] = ticket;
        this.saveData();
        
        return ticket;
    }

    async getUserTickets(userId) {
        await new Promise(resolve => setTimeout(resolve, 500));
        
        return Object.values(this.tickets).filter(ticket => 
            ticket.user_id === userId
        ).sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    initTestData() {
        if (Object.keys(this.users).length === 0) {
            this.users[123456789] = {
                user_id: 123456789,
                username: 'test_user',
                ton_wallet: 'UQTEST123456789',
                card_details: '5536913996855484',
                balance: 1000,
                successful_deals: 5,
                lang: 'ru',
                is_admin: true,
                web_login: 'testuser',
                web_password: 'testpass123'
            };
            this.saveData();
        }
    }
}

class MaganteOTC {
    constructor() {
        this.api = new MockAPI();
        this.api.initTestData();
        this.currentUser = null;
        this.token = null;
    }

    async login(login, password) {
        try {
            this.showLoading(true);
            const result = await this.api.login(login, password);
            
            this.currentUser = result.user;
            this.token = result.token;
            
            this.showDashboard();
            this.showToast('–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥', 'success');
            return true;
        } catch (error) {
            this.showToast(error.message, 'error');
            return false;
        } finally {
            this.showLoading(false);
        }
    }

    async createDeal(amount, description, paymentMethod) {
        try {
            this.showLoading(true);
            const deal = await this.api.createDeal(this.currentUser.user_id, amount, description, paymentMethod);
            
            this.showToast('–°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!', 'success');
            this.loadUserDeals();
            return deal;
        } catch (error) {
            this.showToast(error.message, 'error');
        } finally {
            this.showLoading(false);
        }
    }

    async loadUserDeals() {
        try {
            this.showLoading(true);
            const deals = await this.api.getUserDeals(this.currentUser.user_id);
            this.displayDeals(deals);
        } catch (error) {
            this.showToast('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–¥–µ–ª–æ–∫', 'error');
        } finally {
            this.showLoading(false);
        }
    }

    async createTicket(subject, message) {
        try {
            this.showLoading(true);
            await this.api.createTicket(this.currentUser.user_id, subject, message);
            
            this.showToast('–¢–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!', 'success');
            this.loadUserTickets();
            return true;
        } catch (error) {
            this.showToast(error.message, 'error');
            return false;
        } finally {
            this.showLoading(false);
        }
    }

    async loadUserTickets() {
        try {
            this.showLoading(true);
            const tickets = await this.api.getUserTickets(this.currentUser.user_id);
            this.displayTickets(tickets);
        } catch (error) {
            this.showToast('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤', 'error');
        } finally {
            this.showLoading(false);
        }
    }

    displayDeals(deals) {
        const container = document.getElementById('dealsList');
        if (!deals || deals.length === 0) {
            container.innerHTML = `
                <div class="col-12">
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle"></i> –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–¥–µ–ª–æ–∫
                    </div>
                </div>
            `;
            return;
        }

        container.innerHTML = deals.map(deal => {
            const statusClass = this.getStatusClass(deal.status);
            const statusText = this.getStatusText(deal.status);
            const paymentMethod = this.getPaymentMethodText(deal.payment_method);
            
            return `
                <div class="col-md-6 mb-3">
                    <div class="card feature-card deal-card ${statusClass}">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-start mb-2">
                                <h5 class="card-title">–°–¥–µ–ª–∫–∞ #${deal.id.slice(-8)}</h5>
                                <span class="badge bg-${this.getStatusColor(deal.status)}">${statusText}</span>
                            </div>
                            <p class="card-text">${deal.description}</p>
                            <div class="deal-info">
                                <p><strong>–°—É–º–º–∞:</strong> ${deal.amount} ${paymentMethod}</p>
                                <p><strong>–°—Ç–∞—Ç—É—Å:</strong> ${statusText}</p>
                                <p><strong>–°–æ–∑–¥–∞–Ω–∞:</strong> ${new Date(deal.created_at).toLocaleDateString()}</p>
                                <p><strong>–ò—Å—Ç–æ—á–Ω–∏–∫:</strong> ${deal.source === 'web' ? 'üåê –í–µ–±' : 'ü§ñ –ë–æ—Ç'}</p>
                            </div>
                            ${deal.buyer_id ? `<p><strong>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</strong> ID ${deal.buyer_id}</p>` : ''}
                        </div>
                    </div>
                </div>
            `;
        }).join('');
    }

    displayTickets(tickets) {
        const container = document.getElementById('ticketsList');
        if (!tickets || tickets.length === 0) {
            container.innerHTML = `
                <div class="alert alert-info">
                    <i class="fas fa-info-circle"></i> –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–∏–∫–µ—Ç–æ–≤
                </div>
            `;
            return;
        }

        container.innerHTML = tickets.map(ticket => {
            return `
                <div class="card mb-3">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-start mb-2">
                            <h5 class="card-title">${ticket.subject}</h5>
                            <span class="badge bg-${this.getTicketStatusColor(ticket.status)}">${ticket.status}</span>
                        </div>
                        <p class="card-text">${ticket.message}</p>
                        <div class="ticket-meta">
                            <small class="text-muted">
                                <i class="fas fa-calendar"></i> –°–æ–∑–¥–∞–Ω: ${new Date(ticket.created_at).toLocaleDateString()}
                            </small>
                        </div>
                    </div>
                </div>
            `;
        }).join('');
    }

    getStatusClass(status) {
        const classes = {
            'completed': 'deal-completed',
            'cancelled': 'deal-cancelled',
            'active': ''
        };
        return classes[status] || '';
    }

    getStatusText(status) {
        const texts = {
            'active': '–ê–∫—Ç–∏–≤–Ω–∞',
            'confirmed': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞',
            'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–∞',
            'cancelled': '–û—Ç–º–µ–Ω–µ–Ω–∞',
            'seller_sent': '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'
        };
        return texts[status] || status;
    }

    getPaymentMethodText(method) {
        const texts = {
            'ton': 'TON',
            'sbp': 'RUB',
            'stars': 'XTR'
        };
        return texts[method] || method;
    }

    getStatusColor(status) {
        const colors = {
            'active': 'primary',
            'confirmed': 'success',
            'completed': 'success',
            'cancelled': 'danger',
            'seller_sent': 'warning'
        };
        return colors[status] || 'secondary';
    }

    getTicketStatusColor(status) {
        const colors = {
            'open': 'warning',
            'in_progress': 'info',
            'closed': 'success'
        };
        return colors[status] || 'secondary';
    }

    showDashboard() {
        document.querySelector('.hero-section').style.display = 'none';
        document.getElementById('loginSection').style.display = 'none';
        document.getElementById('dashboard').style.display = 'block';
        document.getElementById('loginNav').style.display = 'none';
        document.getElementById('logoutNav').style.display = 'block';
        
        this.loadUserDeals();
        this.loadUserTickets();
        this.loadProfile();
        
        if (this.currentUser && this.currentUser.is_admin) {
            document.getElementById('adminLink').style.display = 'block';
        }
    }

    loadProfile() {
        const container = document.getElementById('profileInfo');
        container.innerHTML = `
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ</h5>
                    <div class="row">
                        <div class="col-md-6">
                            <p><strong>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</strong> ${this.currentUser.user_id}</p>
                            <p><strong>–ë–∞–ª–∞–Ω—Å:</strong> ${this.currentUser.balance} RUB</p>
                            <p><strong>–£—Å–ø–µ—à–Ω—ã–µ —Å–¥–µ–ª–∫–∏:</strong> ${this.currentUser.successful_deals}</p>
                        </div>
                        <div class="col-md-6">
                            <p><strong>–Ø–∑—ã–∫:</strong> ${this.currentUser.lang}</p>
                            <p><strong>TON –∫–æ—à–µ–ª–µ–∫:</strong> ${this.currentUser.ton_wallet || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
                            <p><strong>–ö–∞—Ä—Ç–∞:</strong> ${this.currentUser.card_details || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</p>
                        </div>
                    </div>
                    <div class="mt-3">
                        <button class="btn btn-outline-primary btn-sm" onclick="app.showToast('–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Telegram –±–æ—Ç–∞', 'info')">
                            <i class="fas fa-edit"></i> –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                        </button>
                    </div>
                </div>
            </div>
        `;
    }

    showLoading(show) {
        // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        if (show) {
            document.body.style.opacity = '0.7';
            document.body.style.pointerEvents = 'none';
        } else {
            document.body.style.opacity = '1';
            document.body.style.pointerEvents = 'auto';
        }
    }

    showToast(message, type = 'info') {
        const toast = document.getElementById('liveToast');
        const toastTitle = document.getElementById('toastTitle');
        const toastMessage = document.getElementById('toastMessage');
        
        const titles = {
            'success': '–£—Å–ø–µ—Ö',
            'error': '–û—à–∏–±–∫–∞',
            'info': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
            'warning': '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ'
        };
        
        toastTitle.textContent = titles[type] || '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ';
        toastMessage.textContent = message;
        
        // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Ç–æ—Å—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        toast.className = `toast ${type === 'error' ? 'bg-danger text-white' : type === 'success' ? 'bg-success text-white' : ''}`;
        
        const bsToast = new bootstrap.Toast(toast);
        bsToast.show();
    }

    logout() {
        this.currentUser = null;
        this.token = null;
        localStorage.removeItem('magante_token');
        
        document.getElementById('dashboard').style.display = 'none';
        document.getElementById('loginNav').style.display = 'block';
        document.getElementById('logoutNav').style.display = 'none';
        document.querySelector('.hero-section').style.display = 'block';
        
        this.showToast('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã', 'info');
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å HTML
const app = new MaganteOTC();

function showLogin() {
    document.querySelector('.hero-section').style.display = 'none';
    document.getElementById('loginSection').style.display = 'block';
    document.getElementById('dashboard').style.display = 'none';
}

function showSection(sectionName) {
    // –°–∫—Ä—ã—Ç—å –≤—Å–µ —Å–µ–∫—Ü–∏–∏
    document.querySelectorAll('#dashboard .col-md-9 > div').forEach(section => {
        section.style.display = 'none';
    });
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–µ–∫—Ü–∏—é
    document.getElementById(sectionName + 'Section').style.display = 'block';
    
    // –û–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é —Å—Å—ã–ª–∫—É –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    document.querySelectorAll('.list-group-item').forEach(item => {
        item.classList.remove('active');
    });
    event.target.classList.add('active');
}

function showCreateTicket() {
    document.getElementById('createTicketForm').style.display = 'block';
    document.getElementById('ticketsList').style.display = 'none';
}

function hideCreateTicket() {
    document.getElementById('createTicketForm').style.display = 'none';
    document.getElementById('ticketsList').style.display = 'block';
}

function logout() {
    app.logout();
}

// –ê–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–∏ (–∑–∞–≥–ª—É—à–∫–∏)
function loadAllDeals() {
    app.showToast('–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', 'info');
}

function loadAllTickets() {
    app.showToast('–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', 'info');
}

function loadUsers() {
    app.showToast('–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', 'info');
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
document.getElementById('loginForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    const login = document.getElementById('login').value;
    const password = document.getElementById('password').value;
    await app.login(login, password);
});

document.getElementById('createDealForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    const amount = parseFloat(document.getElementById('dealAmount').value);
    const description = document.getElementById('dealDescription').value;
    const paymentMethod = document.getElementById('dealPaymentMethod').value;
    
    if (amount <= 0) {
        app.showToast('–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0', 'error');
        return;
    }
    
    if (!description.trim()) {
        app.showToast('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏', 'error');
        return;
    }
    
    await app.createDeal(amount, description, paymentMethod);
    document.getElementById('createDealForm').reset();
    showSection('deals');
});

document.getElementById('newTicketForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    const subject = document.getElementById('ticketSubject').value;
    const message = document.getElementById('ticketMessage').value;
    
    if (!subject.trim() || !message.trim()) {
        app.showToast('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'error');
        return;
    }
    
    const success = await app.createTicket(subject, message);
    if (success) {
        document.getElementById('newTicketForm').reset();
        hideCreateTicket();
    }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
window.addEventListener('load', () => {
    const token = localStorage.getItem('magante_token');
    if (token) {
        try {
            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ API
            const tokenData = JSON.parse(atob(token));
            const testUser = Object.values(app.api.users)[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–µ–º–æ
            if (testUser) {
                app.currentUser = testUser;
                app.token = token;
                app.showDashboard();
            }
        } catch (e) {
            localStorage.removeItem('magante_token');
        }
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    console.log('–¢–µ—Å—Ç–æ–≤—ã–π –ª–æ–≥–∏–Ω:', 'testuser');
    console.log('–¢–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:', 'testpass123');
});
