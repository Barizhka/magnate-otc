class MaganteOTC {
    constructor() {
        this.apiBase = 'https://magnate-otc-2.onrender.com';
        this.currentUser = null;
        this.token = localStorage.getItem('magante_token');
        this.isOnline = false;
        
        this.checkAPIStatus();
    }

    async checkAPIStatus() {
        try {
            const response = await fetch(`${this.apiBase}/api/health`);
            if (response.ok) {
                this.isOnline = true;
                console.log('‚úÖ API –ø–æ–¥–∫–ª—é—á–µ–Ω');
                this.showAPIStatus();
            } else {
                this.isOnline = false;
                console.warn('‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
                this.showAPIStatus();
            }
        } catch (error) {
            this.isOnline = false;
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API:', error);
            this.showAPIStatus();
        }
    }

    showAPIStatus() {
        const statusElement = document.getElementById('apiStatus');
        if (statusElement) {
            if (this.isOnline) {
                statusElement.innerHTML = '<span class="badge bg-success"><i class="fas fa-check me-1"></i>API –æ–Ω–ª–∞–π–Ω</span>';
            } else {
                statusElement.innerHTML = '<span class="badge bg-warning"><i class="fas fa-exclamation-triangle me-1"></i>API –æ—Ñ–ª–∞–π–Ω</span>';
            }
        }
    }

    async login(login, password) {
        try {
            this.showLoading(true);
            
            if (!this.isOnline) {
                throw new Error('–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            }

            const response = await fetch(`${this.apiBase}/api/login`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ 
                    login: login.trim(),
                    password: password.trim()
                })
            });

            const data = await response.json();

            if (response.ok) {
                this.currentUser = data.user;
                this.token = data.token;
                localStorage.setItem('magante_token', this.token);
                this.showDashboard();
                this.showToast('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Magante OTC!', 'success');
                return true;
            } else {
                throw new Error(data.error || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞');
            }
        } catch (error) {
            this.showToast(error.message, 'error');
            return false;
        } finally {
            this.showLoading(false);
        }
    }

    async createDeal(amount, description, paymentMethod) {
        try {
            this.showLoading(true);

            if (!this.token) {
                throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
            }

            const response = await fetch(`${this.apiBase}/api/deals`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${this.token}`
                },
                body: JSON.stringify({
                    amount: parseFloat(amount),
                    description: description.trim(),
                    payment_method: paymentMethod
                })
            });

            const data = await response.json();

            if (response.ok) {
                this.showToast('‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!', 'success');
                this.loadUserDeals();
                return data;
            } else {
                throw new Error(data.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏');
            }
        } catch (error) {
            this.showToast(error.message, 'error');
            return null;
        } finally {
            this.showLoading(false);
        }
    }

    async loadUserDeals() {
        try {
            this.showLoading(true);

            if (!this.token) {
                throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
            }

            const response = await fetch(`${this.apiBase}/api/deals/my`, {
                headers: {
                    'Authorization': `Bearer ${this.token}`
                }
            });

            if (response.ok) {
                const deals = await response.json();
                this.displayDeals(deals);
            } else {
                throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–¥–µ–ª–æ–∫');
            }
        } catch (error) {
            this.showToast('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–¥–µ–ª–æ–∫', 'error');
            this.displayDeals([]);
        } finally {
            this.showLoading(false);
        }
    }

    async loadProfile() {
        try {
            if (!this.token) {
                return;
            }

            const response = await fetch(`${this.apiBase}/api/profile`, {
                headers: {
                    'Authorization': `Bearer ${this.token}`
                }
            });

            if (response.ok) {
                const profile = await response.json();
                this.displayProfile(profile);
                this.updateUserBalance(profile.balance);
            }
        } catch (error) {
            console.error('Profile load error:', error);
            this.displayProfile(this.currentUser);
        }
    }

    async createTicket(subject, message) {
        try {
            this.showLoading(true);

            // –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
            const tickets = JSON.parse(localStorage.getItem('user_tickets')) || [];
            const newTicket = {
                id: 'ticket_' + Date.now(),
                subject: subject,
                message: message,
                status: 'open',
                created_at: new Date().toISOString(),
                user_id: this.currentUser.user_id
            };
            
            tickets.push(newTicket);
            localStorage.setItem('user_tickets', JSON.stringify(tickets));
            
            this.showToast('‚úÖ –¢–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ! –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.', 'success');
            this.loadUserTickets();
            return true;
        } catch (error) {
            this.showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞', 'error');
            return false;
        } finally {
            this.showLoading(false);
        }
    }

    async loadUserTickets() {
        try {
            // –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ localStorage
            const tickets = JSON.parse(localStorage.getItem('user_tickets')) || [];
            const userTickets = tickets.filter(ticket => ticket.user_id === this.currentUser.user_id);
            this.displayTickets(userTickets);
        } catch (error) {
            this.showToast('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤', 'error');
            this.displayTickets([]);
        }
    }

    displayDeals(deals) {
        const container = document.getElementById('dealsList');
        if (!deals || deals.length === 0) {
            container.innerHTML = `
                <div class="col-12">
                    <div class="alert alert-info text-center py-4">
                        <i class="fas fa-info-circle fa-2x mb-3"></i>
                        <h5>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–¥–µ–ª–æ–∫</h5>
                        <p class="text-muted mb-0">–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Å–¥–µ–ª–∫—É –≤–æ –≤–∫–ª–∞–¥–∫–µ "–°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É"</p>
                    </div>
                </div>
            `;
            return;
        }

        container.innerHTML = deals.map(deal => {
            const statusClass = this.getStatusClass(deal.status);
            const statusText = this.getStatusText(deal.status);
            const statusColor = this.getStatusColor(deal.status);
            const paymentMethod = this.getPaymentMethodText(deal.payment_method);
            const createdDate = new Date(deal.created_at).toLocaleDateString('ru-RU');
            const isWebDeal = deal.source === 'web';
            
            return `
                <div class="col-md-6 mb-4">
                    <div class="card feature-card deal-card ${statusClass} h-100">
                        <div class="card-body d-flex flex-column">
                            <div class="d-flex justify-content-between align-items-start mb-3">
                                <h5 class="card-title mb-0">
                                    <i class="fas fa-exchange-alt me-2"></i>
                                    –°–¥–µ–ª–∫–∞ #${deal.id.slice(-8)}
                                </h5>
                                <div>
                                    <span class="badge bg-${statusColor} me-1">${statusText}</span>
                                    <span class="badge bg-${isWebDeal ? 'info' : 'secondary'}">${isWebDeal ? 'üåê –í–µ–±' : 'ü§ñ –ë–æ—Ç'}</span>
                                </div>
                            </div>
                            
                            <p class="card-text flex-grow-1">${deal.description}</p>
                            
                            <div class="deal-info mt-auto">
                                <div class="row small">
                                    <div class="col-6">
                                        <strong class="text-muted">–°—É–º–º–∞:</strong><br>
                                        <span class="fw-bold text-dark fs-6">${deal.amount} ${paymentMethod}</span>
                                    </div>
                                    <div class="col-6">
                                        <strong class="text-muted">–°—Ç–∞—Ç—É—Å:</strong><br>
                                        <span class="badge bg-${statusColor}">${statusText}</span>
                                    </div>
                                </div>
                                <div class="row small mt-2">
                                    <div class="col-6">
                                        <strong class="text-muted">–°–æ–∑–¥–∞–Ω–∞:</strong><br>
                                        ${createdDate}
                                    </div>
                                    <div class="col-6">
                                        <strong class="text-muted">ID:</strong><br>
                                        <code class="small">${deal.id.slice(-12)}</code>
                                    </div>
                                </div>
                                ${deal.buyer_id ? `
                                    <div class="mt-2 pt-2 border-top">
                                        <small class="text-muted"><strong>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</strong> ID ${deal.buyer_id}</small>
                                    </div>
                                ` : ''}
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }).join('');
    }

    displayTickets(tickets) {
        const container = document.getElementById('ticketsList');
        if (!tickets || tickets.length === 0) {
            container.innerHTML = `
                <div class="alert alert-info text-center py-4">
                    <i class="fas fa-ticket-alt fa-2x mb-3"></i>
                    <h5>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–∏–∫–µ—Ç–æ–≤</h5>
                    <p class="text-muted mb-0">–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —Ç–∏–∫–µ—Ç –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</p>
                </div>
            `;
            return;
        }

        container.innerHTML = tickets.map(ticket => {
            const statusColor = this.getTicketStatusColor(ticket.status);
            const createdDate = new Date(ticket.created_at).toLocaleDateString('ru-RU');
            
            return `
                <div class="card mb-3">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-start mb-3">
                            <h5 class="card-title mb-0">
                                <i class="fas fa-ticket-alt me-2"></i>
                                ${ticket.subject}
                            </h5>
                            <span class="badge bg-${statusColor}">${ticket.status}</span>
                        </div>
                        <p class="card-text">${ticket.message}</p>
                        <div class="ticket-meta">
                            <small class="text-muted">
                                <i class="fas fa-calendar me-1"></i>
                                –°–æ–∑–¥–∞–Ω: ${createdDate}
                                <span class="ms-3">
                                    <i class="fas fa-hashtag me-1"></i>
                                    ID: ${ticket.id.slice(-8)}
                                </span>
                            </small>
                        </div>
                    </div>
                </div>
            `;
        }).join('');
    }

    displayProfile(profile) {
        const container = document.getElementById('profileInfo');
        if (!profile) {
            container.innerHTML = `
                <div class="alert alert-warning">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
                </div>
            `;
            return;
        }

        container.innerHTML = `
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-user me-2"></i>
                        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label text-muted small mb-1">ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</label>
                                <p class="mb-0 fw-bold fs-5">${profile.user_id}</p>
                            </div>
                            <div class="mb-3">
                                <label class="form-label text-muted small mb-1">–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</label>
                                <p class="mb-0 fw-bold">${profile.username}</p>
                            </div>
                            <div class="mb-3">
                                <label class="form-label text-muted small mb-1">–ë–∞–ª–∞–Ω—Å</label>
                                <p class="mb-0 fw-bold text-success fs-5">${profile.balance} RUB</p>
                            </div>
                            <div class="mb-3">
                                <label class="form-label text-muted small mb-1">–£—Å–ø–µ—à–Ω—ã–µ —Å–¥–µ–ª–∫–∏</label>
                                <p class="mb-0 fw-bold fs-5">${profile.successful_deals}</p>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label text-muted small mb-1">–°—Ç–∞—Ç—É—Å</label>
                                <p class="mb-0">
                                    ${profile.is_admin ? 
                                        '<span class="badge bg-danger fs-6"><i class="fas fa-crown me-1"></i>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</span>' : 
                                        '<span class="badge bg-secondary fs-6"><i class="fas fa-user me-1"></i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</span>'
                                    }
                                </p>
                            </div>
                            <div class="mb-3">
                                <label class="form-label text-muted small mb-1">–Ø–∑—ã–∫</label>
                                <p class="mb-0 fw-bold">${profile.lang === 'ru' ? 'üá∑üá∫ –†—É—Å—Å–∫–∏–π' : 'üá∫üá∏ English'}</p>
                            </div>
                            <div class="mb-3">
                                <label class="form-label text-muted small mb-1">TON –∫–æ—à–µ–ª–µ–∫</label>
                                <p class="mb-0 font-monospace small bg-light p-2 rounded">${profile.ton_wallet || '<span class="text-muted">–ù–µ —É–∫–∞–∑–∞–Ω</span>'}</p>
                            </div>
                            <div class="mb-3">
                                <label class="form-label text-muted small mb-1">–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞</label>
                                <p class="mb-0 font-monospace small bg-light p-2 rounded">${profile.card_details || '<span class="text-muted">–ù–µ —É–∫–∞–∑–∞–Ω–∞</span>'}</p>
                            </div>
                        </div>
                    </div>
                    <div class="mt-4 p-3 bg-light rounded">
                        <small class="text-muted">
                            <i class="fas fa-info-circle me-1"></i>
                            –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Telegram –±–æ—Ç–∞ @magnate_otc_bot
                        </small>
                    </div>
                </div>
            </div>
        `;
    }

    updateUserBalance(balance) {
        const balanceElement = document.getElementById('userBalance');
        if (balanceElement) {
            balanceElement.textContent = `–ë–∞–ª–∞–Ω—Å: ${balance} RUB`;
        }
    }

    getStatusClass(status) {
        const classes = {
            'completed': 'deal-completed',
            'cancelled': 'deal-cancelled',
            'confirmed': 'deal-confirmed',
            'seller_sent': 'deal-sent'
        };
        return classes[status] || '';
    }

    getStatusText(status) {
        const texts = {
            'active': '–ê–∫—Ç–∏–≤–Ω–∞',
            'confirmed': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞',
            'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–∞',
            'cancelled': '–û—Ç–º–µ–Ω–µ–Ω–∞',
            'seller_sent': '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'
        };
        return texts[status] || status;
    }

    getPaymentMethodText(method) {
        const texts = {
            'ton': 'TON',
            'sbp': 'RUB',
            'stars': 'XTR'
        };
        return texts[method] || method;
    }

    getStatusColor(status) {
        const colors = {
            'active': 'primary',
            'confirmed': 'success',
            'completed': 'success',
            'cancelled': 'danger',
            'seller_sent': 'warning'
        };
        return colors[status] || 'secondary';
    }

    getTicketStatusColor(status) {
        const colors = {
            'open': 'warning',
            'in_progress': 'info',
            'closed': 'success'
        };
        return colors[status] || 'secondary';
    }

    showDashboard() {
        document.querySelector('.hero-section').style.display = 'none';
        document.getElementById('loginSection').style.display = 'none';
        document.getElementById('dashboard').style.display = 'block';
        document.getElementById('loginNav').style.display = 'none';
        document.getElementById('logoutNav').style.display = 'block';
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        this.loadUserDeals();
        this.loadUserTickets();
        this.loadProfile();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω
        if (this.currentUser && this.currentUser.is_admin) {
            document.getElementById('adminLink').style.display = 'block';
        }
        
        // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é showSection
        showSection('deals');
    }

    showLoading(show) {
        const loader = document.getElementById('loadingOverlay');
        if (loader) {
            loader.style.display = show ? 'flex' : 'none';
        }
    }

    showToast(message, type = 'info') {
        // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π toast
        const toastContainer = document.getElementById('toastContainer') || (() => {
            const container = document.createElement('div');
            container.id = 'toastContainer';
            container.className = 'toast-container position-fixed top-0 end-0 p-3';
            document.body.appendChild(container);
            return container;
        })();

        const toastId = 'toast-' + Date.now();
        const icon = {
            'success': 'fa-check-circle',
            'error': 'fa-exclamation-circle',
            'warning': 'fa-exclamation-triangle',
            'info': 'fa-info-circle'
        }[type] || 'fa-info-circle';

        const bgClass = {
            'success': 'bg-success',
            'error': 'bg-danger',
            'warning': 'bg-warning',
            'info': 'bg-info'
        }[type] || 'bg-info';

        const toastHtml = `
            <div id="${toastId}" class="toast ${bgClass} text-white" role="alert">
                <div class="toast-header ${bgClass} text-white">
                    <i class="fas ${icon} me-2"></i>
                    <strong class="me-auto">${this.getToastTitle(type)}</strong>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast"></button>
                </div>
                <div class="toast-body">
                    ${message}
                </div>
            </div>
        `;

        toastContainer.insertAdjacentHTML('beforeend', toastHtml);
        
        const toastElement = document.getElementById(toastId);
        const toast = new bootstrap.Toast(toastElement, { delay: 5000 });
        toast.show();

        toastElement.addEventListener('hidden.bs.toast', () => {
            toastElement.remove();
        });
    }

    getToastTitle(type) {
        const titles = {
            'success': '–£—Å–ø–µ—Ö',
            'error': '–û—à–∏–±–∫–∞',
            'info': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
            'warning': '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ'
        };
        return titles[type] || '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ';
    }

    logout() {
        this.currentUser = null;
        this.token = null;
        localStorage.removeItem('magante_token');
        
        document.getElementById('dashboard').style.display = 'none';
        document.getElementById('loginNav').style.display = 'block';
        document.getElementById('logoutNav').style.display = 'none';
        document.querySelector('.hero-section').style.display = 'block';
        
        this.showToast('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã', 'info');
    }

    // –ê–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–∏
    async loadAllDeals() {
        this.showToast('–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', 'info');
    }

    async loadAllTickets() {
        this.showToast('–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', 'info');
    }

    async loadUsers() {
        this.showToast('–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', 'info');
    }
}
