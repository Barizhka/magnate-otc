class MaganteOTC {
    constructor() {
        this.apiBase = 'https://magnate-otc-2.onrender.com';
        this.currentUser = null;
        this.token = localStorage.getItem('magante_token');
        
        console.log('üöÄ Magante OTC –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
        this.init();
    }

    async init() {
        if (this.token) {
            console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞...');
            const success = await this.validateToken();
            if (!success) {
                this.showLoginForm();
            }
        } else {
            this.showLoginForm();
        }
        
        this.setupEventListeners();
    }

    setupEventListeners() {
        console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...');
        
        // –õ–æ–≥–∏–Ω —Ñ–æ—Ä–º–∞
        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', (e) => {
                e.preventDefault();
                const login = document.getElementById('login').value;
                const password = document.getElementById('password').value;
                this.login(login, password);
            });
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏
        const dealForm = document.getElementById('createDealForm');
        if (dealForm) {
            dealForm.addEventListener('submit', (e) => {
                e.preventDefault();
                const amount = document.getElementById('dealAmount').value;
                const description = document.getElementById('dealDescription').value;
                const paymentMethod = document.getElementById('dealPaymentMethod').value;
                this.createDeal(amount, description, paymentMethod);
            });
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞
        const ticketForm = document.getElementById('newTicketForm');
        if (ticketForm) {
            ticketForm.addEventListener('submit', (e) => {
                e.preventDefault();
                const subject = document.getElementById('ticketSubject').value;
                const message = document.getElementById('ticketMessage').value;
                this.createTicket(subject, message);
            });
        }
    }

    async validateToken() {
        try {
            console.log('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞...');
            const response = await fetch(`${this.apiBase}/api/profile`, {
                headers: {
                    'Authorization': `Bearer ${this.token}`,
                    'Accept': 'application/json'
                }
            });

            if (response.ok) {
                const profile = await response.json();
                this.currentUser = profile;
                this.showDashboard();
                console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω:', profile.username);
                return true;
            } else {
                console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω');
                localStorage.removeItem('magante_token');
                this.token = null;
                return false;
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', error);
            return false;
        }
    }

    async login(login, password) {
        try {
            this.showLoading(true);
            console.log('üîê –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Ö–æ–¥...');

            const response = await fetch(`${this.apiBase}/api/login`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                body: JSON.stringify({ 
                    login: login.trim(),
                    password: password.trim()
                })
            });

            console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status);

            const data = await response.json();
            console.log('üì¶ –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', data);

            if (response.ok) {
                this.currentUser = data.user;
                this.token = data.token;
                localStorage.setItem('magante_token', this.token);
                this.showDashboard();
                this.showToast('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!', 'success');
                return true;
            } else {
                throw new Error(data.error || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
            this.showToast(error.message, 'error');
            return false;
        } finally {
            this.showLoading(false); // –í–ê–ñ–ù–û: —É–±–∏—Ä–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤ finally
        }
    }

    async createDeal(amount, description, paymentMethod) {
        try {
            this.showLoading(true);
            console.log('üíº –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏...');

            const response = await fetch(`${this.apiBase}/api/deals`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${this.token}`,
                    'Accept': 'application/json'
                },
                body: JSON.stringify({
                    amount: parseFloat(amount),
                    description: description.trim(),
                    payment_method: paymentMethod
                })
            });

            console.log('üì° –û—Ç–≤–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏:', response.status);

            const data = await response.json();
            console.log('üì¶ –î–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏:', data);

            if (response.ok) {
                this.showToast('‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞! –°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram –±–æ—Ç.', 'success');
                document.getElementById('createDealForm').reset();
                // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º
                this.showSection('dealsSection');
                return data;
            } else {
                throw new Error(data.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏:', error);
            this.showToast(error.message, 'error');
            return null;
        } finally {
            this.showLoading(false); // –í–ê–ñ–ù–û: —É–±–∏—Ä–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        }
    }

    async loadUserDeals() {
        try {
            console.log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Å–¥–µ–ª–æ–∫...');
            const response = await fetch(`${this.apiBase}/api/deals/my`, {
                headers: {
                    'Authorization': `Bearer ${this.token}`,
                    'Accept': 'application/json'
                }
            });

            console.log('üì° –û—Ç–≤–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å–¥–µ–ª–æ–∫:', response.status);

            if (response.ok) {
                const deals = await response.json();
                this.displayDeals(deals);
                console.log('‚úÖ –°–¥–µ–ª–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', deals.length);
            } else {
                throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–¥–µ–ª–æ–∫');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–¥–µ–ª–æ–∫:', error);
            this.showToast('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–¥–µ–ª–æ–∫', 'error');
            this.displayDeals([]);
        }
    }

    async loadProfile() {
        try {
            console.log('üë§ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è...');
            const response = await fetch(`${this.apiBase}/api/profile`, {
                headers: {
                    'Authorization': `Bearer ${this.token}`,
                    'Accept': 'application/json'
                }
            });

            if (response.ok) {
                const profile = await response.json();
                this.displayProfile(profile);
                this.updateUserBalance(profile.balance);
                console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
        }
    }

    async createTicket(subject, message) {
        try {
            this.showLoading(true);
            console.log('üé´ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞...');

            const response = await fetch(`${this.apiBase}/api/tickets`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${this.token}`,
                    'Accept': 'application/json'
                },
                body: JSON.stringify({
                    subject: subject.trim(),
                    message: message.trim()
                })
            });

            console.log('üì° –û—Ç–≤–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞:', response.status);

            const data = await response.json();

            if (response.ok) {
                this.showToast('‚úÖ –¢–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω!', 'success');
                document.getElementById('newTicketForm').reset();
                this.hideCreateTicket();
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ç–æ–≤
                this.loadUserTickets();
                return data;
            } else {
                throw new Error(data.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞:', error);
            this.showToast(error.message, 'error');
            return false;
        } finally {
            this.showLoading(false); // –í–ê–ñ–ù–û: —É–±–∏—Ä–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        }
    }

    async loadUserTickets() {
        try {
            console.log('üé´ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–∫–µ—Ç–æ–≤...');
            const response = await fetch(`${this.apiBase}/api/tickets/my`, {
                headers: {
                    'Authorization': `Bearer ${this.token}`,
                    'Accept': 'application/json'
                }
            });

            console.log('üì° –û—Ç–≤–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤:', response.status);

            if (response.ok) {
                const tickets = await response.json();
                this.displayTickets(tickets);
                console.log('‚úÖ –¢–∏–∫–µ—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', tickets.length);
            } else {
                throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤:', error);
            this.showToast('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤', 'error');
            this.displayTickets([]);
        }
    }

    displayDeals(deals) {
        const container = document.getElementById('dealsList');
        if (!container) {
            console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä dealsList –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return;
        }

        if (!deals || deals.length === 0) {
            container.innerHTML = `
                <div class="col-12">
                    <div class="alert alert-info text-center py-4">
                        <i class="fas fa-info-circle fa-2x mb-3"></i>
                        <h5>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–¥–µ–ª–æ–∫</h5>
                        <p class="text-muted mb-0">–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Å–¥–µ–ª–∫—É –≤–æ –≤–∫–ª–∞–¥–∫–µ "–°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É"</p>
                    </div>
                </div>
            `;
            return;
        }

        container.innerHTML = deals.map(deal => {
            const dealLink = `https://t.me/magnate_otc_bot?start=${deal.id}`;
            return `
                <div class="col-md-6 mb-4">
                    <div class="card feature-card h-100">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-start mb-3">
                                <h5 class="card-title mb-0">
                                    <i class="fas fa-exchange-alt me-2"></i>
                                    –°–¥–µ–ª–∫–∞ #${deal.id?.slice(-8) || 'N/A'}
                                </h5>
                                <span class="badge bg-${this.getStatusColor(deal.status)}">
                                    ${this.getStatusText(deal.status)}
                                </span>
                            </div>
                            <p class="card-text">${deal.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</p>
                            <div class="deal-info">
                                <div class="row small">
                                    <div class="col-6">
                                        <strong>–°—É–º–º–∞:</strong><br>
                                        <span class="fw-bold">${deal.amount} ${this.getPaymentMethodText(deal.payment_method)}</span>
                                    </div>
                                    <div class="col-6">
                                        <strong>–°—Ç–∞—Ç—É—Å:</strong><br>
                                        <span class="badge bg-${this.getStatusColor(deal.status)}">${this.getStatusText(deal.status)}</span>
                                    </div>
                                </div>
                                <div class="row small mt-2">
                                    <div class="col-6">
                                        <strong>–°–æ–∑–¥–∞–Ω–∞:</strong><br>
                                        ${new Date(deal.created_at).toLocaleDateString('ru-RU')}
                                    </div>
                                    <div class="col-6">
                                        <strong>ID:</strong><br>
                                        <code class="small">${deal.id?.slice(-12) || 'N/A'}</code>
                                    </div>
                                </div>
                                ${deal.status === 'active' ? `
                                    <div class="mt-3">
                                        <strong>üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:</strong>
                                        <div class="input-group input-group-sm mt-1">
                                            <input type="text" class="form-control" value="${dealLink}" readonly>
                                            <button class="btn btn-outline-secondary" type="button" onclick="copyToClipboard('${dealLink}')">
                                                <i class="fas fa-copy"></i>
                                            </button>
                                        </div>
                                        <small class="text-muted">–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –ø–æ–∫—É–ø–∞—Ç–µ–ª—é</small>
                                    </div>
                                ` : ''}
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }).join('');
    }

    displayTickets(tickets) {
        const container = document.getElementById('ticketsList');
        if (!container) {
            console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ticketsList –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return;
        }

        if (!tickets || tickets.length === 0) {
            container.innerHTML = `
                <div class="alert alert-info text-center py-4">
                    <i class="fas fa-ticket-alt fa-2x mb-3"></i>
                    <h5>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–∏–∫–µ—Ç–æ–≤</h5>
                    <p class="text-muted mb-0">–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —Ç–∏–∫–µ—Ç –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</p>
                </div>
            `;
            return;
        }

        container.innerHTML = tickets.map(ticket => `
            <div class="card mb-3">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-start mb-3">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-ticket-alt me-2"></i>
                            ${ticket.subject}
                        </h5>
                        <span class="badge bg-${this.getTicketStatusColor(ticket.status)}">
                            ${this.getTicketStatusText(ticket.status)}
                        </span>
                    </div>
                    <p class="card-text">${ticket.message}</p>
                    <small class="text-muted">
                        <i class="fas fa-calendar me-1"></i>
                        –°–æ–∑–¥–∞–Ω: ${new Date(ticket.created_at).toLocaleDateString('ru-RU')}
                    </small>
                </div>
            </div>
        `).join('');
    }

    displayProfile(profile) {
        const container = document.getElementById('profileInfo');
        if (!container) {
            console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä profileInfo –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return;
        }

        container.innerHTML = `
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-user me-2"></i>
                        –ü—Ä–æ—Ñ–∏–ª—å
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <p><strong>ID:</strong> ${profile.user_id}</p>
                            <p><strong>–ò–º—è:</strong> ${profile.username}</p>
                            <p><strong>–ë–∞–ª–∞–Ω—Å:</strong> <span class="text-success">${profile.balance} RUB</span></p>
                            <p><strong>–°–¥–µ–ª–∫–∏:</strong> ${profile.successful_deals}</p>
                        </div>
                        <div class="col-md-6">
                            <p><strong>–°—Ç–∞—Ç—É—Å:</strong> ${profile.is_admin ? '<span class="badge bg-danger">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</span>' : '<span class="badge bg-secondary">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</span>'}</p>
                            <p><strong>TON –∫–æ—à–µ–ª–µ–∫:</strong> ${profile.ton_wallet || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
                            <p><strong>–ö–∞—Ä—Ç–∞:</strong> ${profile.card_details || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</p>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }

    updateUserBalance(balance) {
        const balanceElement = document.getElementById('userBalance');
        if (balanceElement) {
            balanceElement.textContent = `–ë–∞–ª–∞–Ω—Å: ${balance} RUB`;
        }
    }

    showDashboard() {
        console.log('üè† –ü–æ–∫–∞–∑ –¥–∞—à–±–æ—Ä–¥–∞...');
        
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏
        document.querySelector('.hero-section').style.display = 'none';
        document.getElementById('loginSection').style.display = 'none';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—à–±–æ—Ä–¥
        document.getElementById('dashboard').style.display = 'block';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        document.getElementById('loginNav').style.display = 'none';
        document.getElementById('logoutNav').style.display = 'block';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω
        if (this.currentUser && this.currentUser.is_admin) {
            const adminLink = document.getElementById('adminLink');
            if (adminLink) adminLink.style.display = 'block';
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        this.loadUserDeals();
        this.loadProfile();
        
        console.log('‚úÖ –î–∞—à–±–æ—Ä–¥ –ø–æ–∫–∞–∑–∞–Ω');
    }

    showLoginForm() {
        console.log('üîê –ü–æ–∫–∞–∑ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞...');
        document.querySelector('.hero-section').style.display = 'block';
        document.getElementById('loginSection').style.display = 'none';
        document.getElementById('dashboard').style.display = 'none';
        document.getElementById('loginNav').style.display = 'block';
        document.getElementById('logoutNav').style.display = 'none';
    }

    showSection(sectionName) {
        console.log('üìÅ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ä–∞–∑–¥–µ–ª:', sectionName);
        
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã (—Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º Section)
        const sections = ['dealsSection', 'createDealSection', 'ticketsSection', 'profileSection', 'adminSection'];
        sections.forEach(section => {
            const element = document.getElementById(section);
            if (element) {
                element.style.display = 'none';
                console.log('‚úÖ –°–∫—Ä—ã—Ç —Ä–∞–∑–¥–µ–ª:', section);
            }
        });

        // –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞ –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞
        const createTicketForm = document.getElementById('createTicketForm');
        if (createTicketForm) createTicketForm.style.display = 'none';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const ticketsList = document.getElementById('ticketsList');
        if (ticketsList) {
            ticketsList.style.display = 'block';
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª
        const targetSection = document.getElementById(sectionName);
        if (targetSection) {
            targetSection.style.display = 'block';
            console.log('‚úÖ –ü–æ–∫–∞–∑–∞–Ω —Ä–∞–∑–¥–µ–ª:', sectionName);
        } else {
            console.log('‚ùå –¶–µ–ª–µ–≤–æ–π —Ä–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:', sectionName);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        const navLinks = document.querySelectorAll('.list-group-item');
        navLinks.forEach(link => {
            link.classList.remove('active');
            // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞ –∏ —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤
            const linkOnClick = link.getAttribute('onclick') || '';
            if (linkOnClick.includes(sectionName.replace('Section', ''))) {
                link.classList.add('active');
            }
        });

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏
        switch(sectionName) {
            case 'dealsSection':
                this.loadUserDeals();
                break;
            case 'ticketsSection':
                this.loadUserTickets();
                break;
            case 'profileSection':
                this.loadProfile();
                break;
        }
    }

    showCreateTicket() {
        console.log('üìù –ü–æ–∫–∞–∑ —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞');
        // –°–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ç–æ–≤
        const ticketsList = document.getElementById('ticketsList');
        if (ticketsList) ticketsList.style.display = 'none';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
        const createTicketForm = document.getElementById('createTicketForm');
        if (createTicketForm) createTicketForm.style.display = 'block';
    }

    hideCreateTicket() {
        console.log('üìù –°–∫—Ä—ã—Ç–∏–µ —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞');
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ç–æ–≤
        const ticketsList = document.getElementById('ticketsList');
        if (ticketsList) ticketsList.style.display = 'block';
        
        // –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
        const createTicketForm = document.getElementById('createTicketForm');
        if (createTicketForm) createTicketForm.style.display = 'none';
    }

    showLoading(show) {
        const loader = document.getElementById('loadingOverlay');
        if (loader) {
            loader.style.display = show ? 'flex' : 'none';
        }
    }

    showToast(message, type = 'info') {
        // –ü—Ä–æ—Å—Ç–æ–π toast –±–µ–∑ Bootstrap
        const toast = document.createElement('div');
        toast.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 5px;
            color: white;
            z-index: 10000;
            max-width: 300px;
            word-wrap: break-word;
        `;
        
        const bgColors = {
            'success': '#28a745',
            'error': '#dc3545', 
            'warning': '#ffc107',
            'info': '#17a2b8'
        };
        
        toast.style.backgroundColor = bgColors[type] || bgColors.info;
        toast.textContent = message;
        
        document.body.appendChild(toast);
        
        setTimeout(() => {
            if (toast.parentNode) {
                toast.parentNode.removeChild(toast);
            }
        }, 5000);
    }

    logout() {
        console.log('üö™ –í—ã—Ö–æ–¥...');
        this.currentUser = null;
        this.token = null;
        localStorage.removeItem('magante_token');
        this.showLoginForm();
        this.showToast('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã', 'info');
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    getStatusText(status) {
        const texts = {
            'active': '–ê–∫—Ç–∏–≤–Ω–∞',
            'confirmed': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞',
            'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–∞',
            'cancelled': '–û—Ç–º–µ–Ω–µ–Ω–∞'
        };
        return texts[status] || status;
    }

    getTicketStatusText(status) {
        const texts = {
            'open': '–û—Ç–∫—Ä—ã—Ç',
            'in_progress': '–í —Ä–∞–±–æ—Ç–µ',
            'closed': '–ó–∞–∫—Ä—ã—Ç'
        };
        return texts[status] || status;
    }

    getPaymentMethodText(method) {
        const texts = {
            'ton': 'TON',
            'sbp': 'RUB',
            'stars': 'XTR'
        };
        return texts[method] || method;
    }

    getStatusColor(status) {
        const colors = {
            'active': 'primary',
            'confirmed': 'success',
            'completed': 'success',
            'cancelled': 'danger'
        };
        return colors[status] || 'secondary';
    }

    getTicketStatusColor(status) {
        const colors = {
            'open': 'warning',
            'in_progress': 'info',
            'closed': 'success'
        };
        return colors[status] || 'secondary';
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ - –û–ë–ù–û–í–õ–ï–ù–´ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ ID
function showSection(sectionName) {
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å Section –∫ –∏–º–µ–Ω–∞–º —Ä–∞–∑–¥–µ–ª–æ–≤
    let actualSectionName = sectionName;
    if (!sectionName.endsWith('Section')) {
        actualSectionName = sectionName + 'Section';
    }
    
    if (window.maganteOTC) {
        window.maganteOTC.showSection(actualSectionName);
    } else {
        console.error('MaganteOTC –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
}

function showLogin() {
    document.querySelector('.hero-section').style.display = 'none';
    document.getElementById('loginSection').style.display = 'block';
}

function logout() {
    if (window.maganteOTC) {
        window.maganteOTC.logout();
    }
}

function showCreateTicket() {
    if (window.maganteOTC) {
        window.maganteOTC.showCreateTicket();
    }
}

function hideCreateTicket() {
    if (window.maganteOTC) {
        window.maganteOTC.hideCreateTicket();
    }
}

function loadUserDeals() {
    if (window.maganteOTC) {
        window.maganteOTC.loadUserDeals();
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ —Å–¥–µ–ª–∫–∏
function copyToClipboard(text) {
    navigator.clipboard.writeText(text).then(() => {
        if (window.maganteOTC) {
            window.maganteOTC.showToast('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!', 'success');
        }
    }).catch(err => {
        console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: ', err);
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∑–∞–ø—É—Å–∫ MaganteOTC...');
    window.maganteOTC = new MaganteOTC();
});
